<!-------------------------- JAVA SCRIPT -------------------------------> 
	Variáveis Simples só conseguem armazenar um valor por vez.

	variáveis compostas devem ser capazes de armazenar vários valores 
	em uma mesma estrutura.

	Array ou um vetor é uma variável que tem vários elementos.
	Cada elemento é composto por seu valor e chave de identificação

	Exemplo:
	let num = [5,8,4]  -  Os elementos começam do 0, logo:
	5 = 0, 8 = 2, 4 = 3
<!---------------------------------------------------------------------->  
Localizador de Valores

	n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
<!--------------------------------------------------------------------------------------->
Sinais e Converções
	+ para adição
	+ para concatenação

	String -> Número

	Number.parseInt(n) - Numeros Inteiros
	Number.parseFloat(n) - Numeros racionais(Com virgula)
	Number(n) - O proprio motor JS verifica o tipo do dado numeral inserido


	Número -> String

	String(n)
	n.toString()

	s.length          | Quantos caracteres a string tem
	s.toUpperCase()   |
<!------------------------------------------------------------------------------------->
 <!-  Eventos com DOM 
	Mouse

	mouseenter
	mousemove
	mousedown
	mouseup
	click
	mouseout
-----------------------------------------------------------------
Funções

	São ações executadas assim que são chamadas ou em decorrência de algum evento.
	Conjunto de linhas(bloco) que executam a partir de um evento

	Uma função pode receber parâmetros e tornar parâmetro.
	Toda função precisa:
	 - Uma chamada
	 - conjunto de parâmetros
	 - ações
	 - retorno

	 obs: Nem toda função tem parametros ou retornos

		function ação(parâmetro) {

				return res
			}
		ação(5) 

		Exemplo:

		function parimp(n) {
			if(n%2==0){
				return 'par'
			} else {
				return 'ímpar'
			}
		}

		let res = parimp(11)
----------------------------------------------------------------->
<!--	Condições -->
	<f
		if (condição) {
			true
		} else {
			false
		}
	-------------------------------------
	>
	<--> Tipos de condição-> 
	<f
		Condição simples:

		if (condição) {
			true
		}

		Condição composta:

		if (condição) {
			true
		} else {
			false
		}
	>
	<!------------------------------------>

	<f Condição Múltipla: 

		switch (expressão) {
			case valor1:
				[Bloco]
				break <- Serve para Seguir o Fluxo do codigo assim que o caso for True
			case valor2:
				[Bloco]
				break
			case valor3:
				[Bloco]
				break
			default:
				[Bloco]
				break(opcional)
		}
<!-------------------------------------------------------------------------->
Repetições

	--------- Exemplo -----------
		function comerPizza(){
			while (temFatia()) {
				comerFatia()
			}
		}
	-----------------------------	
		var c = 1
	<!- ----------------------------- >	
	//Executa primeiro e depois faz o teste
		do {
			console.log(`Passo ${c}`)
			c++ // c = c + 1
		} while (c <= 6)
	<!- ----------------------------- >
	// Testa Primeiro e depois executa
		var c = 1
		while (c <= 3 ) {
			console.log(`Passo ${c}`)
			c++ // c = c + 1
		} 
	<!- ----------------------------- >
		//Se o teste for falso, ele seguirá o fluxo
		for(inicialização; teste lógico ; incremento) {
				[BLOCO]
		}
<!---------------------------- HTML ----------------------------------------->
> Media Queries
	MEDIA QUERIES

	Todas as demais mídias

	typical Device Breakpoints

	Pequenas Telas: até 600px
	Celular: 600px a 768px
	Tablet: 768px a 992px
	Desktop: 992px a 1200px
	Grandes Telas: > 1200px

	@media print { /* IMPRESSÃO */

	}

	@media screen and (min-width: 768px) and (max-width: 992px) {   /* TABLET */

	}

	@media screen and (min-width: 992px) and (max-width: 1200px) { /* DESKTOP */

	}

	@media screen and (min-width: 1200px) /* GRANDES TELAS */
	-------------------------------------------------------------------------------

	<i class="material-symbols-outlined">Input</i>

	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

	-------------------------------------------------------------------------------

- FLEX BOX -

	display: flex;

	///////FLEX DIRECTION///////

	flex-direction: row;
	--------->
	flex-direction: row-reverse;
	<-------- 
	flex-direction: column; vv
	flex-direction: column-reverse; ^^
<!----------------------------------------------------------->

<!- -----//////EIXOS////// ---------------------------------->

	Ao usar flex-direction, sempre são criados os eixos (axis);
	Cada eixo gera 2 pontos principais: O inicial e o final 

	main-axis (Eixo Principal) - Horizontal quando Row e Vertical quando Column
	main-start e main-end.

	cross-axis(Eixo Transversal) - Vertical quando Row e Horizontal quando Column
	cross-start e cross-end
<!- --------- FLEX BOXES------------------------------------->

 <!- 
	flex-wrap: nowrap;(padrão)
	flex-wrap: wrap; - pega o ultimo elemento e "quebra", sempre no sentido do eixo transversal
	flex-wrap: wrap-reverse; - Segue o sentido contrário do eixo transversal

	SHORTHAND: flex-flow: row nowrap;


	align-items: stretch;(Padrão)
	align-items: flex-start;
	align-items: flex-end;
	align-items: center;


	justify-content: ;
	flex-start
	flex-end
	center
	space-between
	space-evenly
	->

	<!-- Centraliza os elementos da tela -->
		 display: flex;
		 flex-flow: row nowrap;
		 justify-content: center;
		 align-items: center;
	<!------------------------------------->

	<f
	order:;

	align-self: ;
	auto
	flex-start
	flex-end
	center
	stretch

	auto ou inehit (Valor padrão)

	flex-basis:;
	flex-grow:;
	flex-schrink:;
	> <! ---------------------------------------
	Simplificando flex:
	---------------------------------------->
	<f -----------------------------------
	flex-basis: 150px;
    flex-grow: 0;
	flex-schrink: 1;
	 
	flex: 0 1 150px

	---------------------
	flex: 0 1 auto; 
	flex: initial
	---------------------
	flex: 0 0 auto;
	flex: none;
	---------------------
	flex: 1 1 auto;
	flex: auto;
	---------------------
	flex: 3 1 auto;
	flex: 3	
	--------------------------------------
>


